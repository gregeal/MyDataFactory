{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gregadf"
		},
		"AzureDataLakeLinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeLinkedService'"
		},
		"AzureSqlDatabaseConfigTableLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseConfigTableLinkedService'"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"SqlServerLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerLinkedService'"
		},
		"AzureDataLakeLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://gregadl.dfs.core.windows.net"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\DESKTOP-HDGC41U\\Users\\grege\\Downloads\\Azure Data Factory Workshop - Real World Project & Use Cases\\Azure Data Factory Workshop\\03 Resources to download"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "grege"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DimProdCat IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingDataLake": {},
									"DimprodCat": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-29T22:44:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimStore IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Store",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingDatalake": {},
									"DimStore": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic Data PipeLine_Incremental_and_Full_Load_Staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.config\nWHERE enabled = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter_GregVM_Tables",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source,'gregvm')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FilterFileSystem",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source,'FileSystem')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_GregVM_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_GregVM_Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().load_Flag,'Incremental'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy source to datalake Staging_FULL",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().Source_Table}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SqlServerTable1",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "CustomerDataDataLake",
														"type": "DatasetReference",
														"parameters": {
															"Stagingfilename": "@{item().Dest_Table}"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Get Max Last UpdateDate ConfigTable",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT watermark_value FROM dbo.config\nWHERE Source_Table like '@{item().Source_Table}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlTable1",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Copy Source to DataLake Staging",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get Max Last UpdateDate ConfigTable",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().Source_table}\nWHERE\nCONVERT(datetime,@{item().Watermark_Column},105) > CONVERT(datetime,substring(replace('@activity('activity('Get Max Last UpdateDate ConfigTable').output').output.firstRow.watermark_value}''T',' '),0,20),120)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SqlServerTable1",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "CustomerDataDataLake",
														"type": "DatasetReference",
														"parameters": {
															"Stagingfilename": {
																"value": "@{item().Dest_Table}",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Data flow1",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "Copy Source to DataLake Staging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dataflow1",
														"type": "DataFlowReference",
														"parameters": {
															"sourcetable": {
																"value": "'@{item().Dest_Table}'",
																"type": "Expression"
															},
															"watermark_field": {
																"value": "'@{item().Watermark_Column}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"source1": {},
															"sink1": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "update config\nset statues = 'Succeeded'\nwhere Dest_table = '@{item().Dest_Table}'\n\nselect 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy Product Category File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FilterFileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ProductCategoryFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerDataDataLake",
								"type": "DatasetReference",
								"parameters": {
									"Stagingfilename": {
										"value": "Product-Category-Subcategory.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Update Config status_copy1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Product Category File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update config\nset status = 'Succeeded'\nwhere Dest_table = 'Product-Category-Subcategory.csv'\n\nselect 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-29T21:40:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/ProductCategoryFile')]",
				"[concat(variables('factoryId'), '/datasets/CustomerDataDataLake')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fact Transactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FactDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingDataLake": {},
									"DimCustomer": {},
									"DimProdCat": {},
									"DimStore": {},
									"DimDate": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FactDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CustomerCopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerDataDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TransactionCopy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CustomerCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerDataDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopyFlatFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransactionCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ProductCategoryFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerDataDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-28T13:07:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/CustomerDataDataLake')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable2')]",
				"[concat(variables('factoryId'), '/datasets/ProductCategoryFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDimDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "FullDateUK",
						"type": "char"
					},
					{
						"name": "FullDateUSA",
						"type": "char"
					},
					{
						"name": "DayOfMonth",
						"type": "varchar"
					},
					{
						"name": "DaySuffix",
						"type": "varchar"
					},
					{
						"name": "DayName",
						"type": "varchar"
					},
					{
						"name": "DayOfWeekUSA",
						"type": "char"
					},
					{
						"name": "DayOfWeekUK",
						"type": "char"
					},
					{
						"name": "DayOfWeekInMonth",
						"type": "varchar"
					},
					{
						"name": "DayOfWeekInYear",
						"type": "varchar"
					},
					{
						"name": "DayOfQuarter",
						"type": "varchar"
					},
					{
						"name": "DayOfYear",
						"type": "varchar"
					},
					{
						"name": "WeekOfMonth",
						"type": "varchar"
					},
					{
						"name": "WeekOfQuarter",
						"type": "varchar"
					},
					{
						"name": "WeekOfYear",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "MonthName",
						"type": "varchar"
					},
					{
						"name": "MonthOfQuarter",
						"type": "varchar"
					},
					{
						"name": "Quarter",
						"type": "char"
					},
					{
						"name": "QuarterName",
						"type": "varchar"
					},
					{
						"name": "Year",
						"type": "char"
					},
					{
						"name": "YearName",
						"type": "char"
					},
					{
						"name": "MonthYear",
						"type": "char"
					},
					{
						"name": "MMYYYY",
						"type": "char"
					},
					{
						"name": "FirstDayOfMonth",
						"type": "date"
					},
					{
						"name": "LastDayOfMonth",
						"type": "date"
					},
					{
						"name": "FirstDayOfQuarter",
						"type": "date"
					},
					{
						"name": "LastDayOfQuarter",
						"type": "date"
					},
					{
						"name": "FirstDayOfYear",
						"type": "date"
					},
					{
						"name": "LastDayOfYear",
						"type": "date"
					},
					{
						"name": "IsHolidayUSA",
						"type": "bit"
					},
					{
						"name": "IsWeekday",
						"type": "bit"
					},
					{
						"name": "HolidayUSA",
						"type": "varchar"
					},
					{
						"name": "IsHolidayUK",
						"type": "bit"
					},
					{
						"name": "HolidayUK",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimDate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Source",
						"type": "varchar"
					},
					{
						"name": "Source_Table",
						"type": "varchar"
					},
					{
						"name": "Dest_Table",
						"type": "varchar"
					},
					{
						"name": "Columns",
						"type": "varchar"
					},
					{
						"name": "Watermark_Column",
						"type": "varchar"
					},
					{
						"name": "Watermark_Value",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Load_Flag",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Comment",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "DOB",
						"type": "varchar"
					},
					{
						"name": "city_code",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Prod_Cat_SubCat_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Cat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Category",
						"type": "varchar"
					},
					{
						"name": "Product_SubCat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_product_Cat_SubCat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "DOB",
						"type": "varchar"
					},
					{
						"name": "city_code",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDimStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Store_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Type",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_Store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableFact_Transaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Fact_Tran_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Prod_Cat_SubCat_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tran_date",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "tax",
						"type": "float",
						"precision": 15
					},
					{
						"name": "total_amount",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Fact_Transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDataDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stagingfilename": {
						"type": "string",
						"defaultValue": "demo"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Stagingfilename",
							"type": "Expression"
						},
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_DataInDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customer.csv",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stagingfilename": {
						"type": "string",
						"defaultValue": "demo"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Stagingfilename",
							"type": "Expression"
						},
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProdCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Product-Category-Subcategory.csv",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "prod_cat",
						"type": "String"
					},
					{
						"name": "prod_sub_cat_code",
						"type": "String"
					},
					{
						"name": "prod_subcat",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProdCatsql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConfigTableLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Prod_Cat_SubCat_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Cat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Category",
						"type": "varchar"
					},
					{
						"name": "Product_SubCat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_product_Cat_SubCat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConfigTableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductCategoryFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "005 Product-Category-Subcategory.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "prod_cat",
						"type": "String"
					},
					{
						"name": "prod_sub_cat_code",
						"type": "String"
					},
					{
						"name": "prod_subcat",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "transaction_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tran_date",
						"type": "nvarchar"
					},
					{
						"name": "prod_subcat_code",
						"type": "nvarchar"
					},
					{
						"name": "prod_cat_code",
						"type": "nvarchar"
					},
					{
						"name": "Qty",
						"type": "nvarchar"
					},
					{
						"name": "Rate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Tax",
						"type": "float",
						"precision": 15
					},
					{
						"name": "total_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Store_type",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StoreDatasetFromTransactionFactTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Transactions.csv",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "transaction_id",
						"type": "String"
					},
					{
						"name": "cust_id",
						"type": "String"
					},
					{
						"name": "tran_date",
						"type": "String"
					},
					{
						"name": "prod_subcat_code",
						"type": "String"
					},
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "Rate",
						"type": "String"
					},
					{
						"name": "Tax",
						"type": "String"
					},
					{
						"name": "total_amt",
						"type": "String"
					},
					{
						"name": "Store_type",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cusomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customer.csv",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_Id",
						"type": "String"
					},
					{
						"name": "DOB",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "city_code",
						"type": "String"
					},
					{
						"name": "Customer_Name",
						"type": "String"
					},
					{
						"name": "Created_Modified_Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeLinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseConfigTableLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseConfigTableLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Selfhosted-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Selfhosted-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerLinkedService_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Selfhosted-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Selfhosted-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Selfhosted-IR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StoreDatasetFromTransactionFactTable",
								"type": "DatasetReference"
							},
							"name": "StagingDataLake"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "DimProdCat"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDimStore",
								"type": "DatasetReference"
							},
							"name": "DimStore"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlDimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableFact_Transaction",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JoinDimCustomer"
						},
						{
							"name": "JoinDimProdCat"
						},
						{
							"name": "JoinDimStore"
						},
						{
							"name": "JoinDimDate"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\ttransaction_id as string,\n\t\tcust_id as string,\n\t\ttran_date as string,\n\t\tprod_subcat_code as string,\n\t\tprod_cat_code as string,\n\t\tQty as string,\n\t\tRate as string,\n\t\tTax as string,\n\t\ttotal_amt as string,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingDataLake\nsource(output(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomer\nsource(output(\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tProduct_Cat_Code as integer,\n\t\tProduct_Category as string,\n\t\tProduct_SubCat_Code as integer,\n\t\tProduct_SubCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimProdCat\nsource(output(\n\t\tStore_Key as integer,\n\t\tStore_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimStore\nsource(output(\n\t\tDateKey as integer,\n\t\tDate as date,\n\t\tFullDateUK as string,\n\t\tFullDateUSA as string,\n\t\tDayOfMonth as string,\n\t\tDaySuffix as string,\n\t\tDayName as string,\n\t\tDayOfWeekUSA as string,\n\t\tDayOfWeekUK as string,\n\t\tDayOfWeekInMonth as string,\n\t\tDayOfWeekInYear as string,\n\t\tDayOfQuarter as string,\n\t\tDayOfYear as string,\n\t\tWeekOfMonth as string,\n\t\tWeekOfQuarter as string,\n\t\tWeekOfYear as string,\n\t\tMonth as string,\n\t\tMonthName as string,\n\t\tMonthOfQuarter as string,\n\t\tQuarter as string,\n\t\tQuarterName as string,\n\t\tYear as string,\n\t\tYearName as string,\n\t\tMonthYear as string,\n\t\tMMYYYY as string,\n\t\tFirstDayOfMonth as date,\n\t\tLastDayOfMonth as date,\n\t\tFirstDayOfQuarter as date,\n\t\tLastDayOfQuarter as date,\n\t\tFirstDayOfYear as date,\n\t\tLastDayOfYear as date,\n\t\tIsHolidayUSA as boolean,\n\t\tIsWeekday as boolean,\n\t\tHolidayUSA as string,\n\t\tIsHolidayUK as boolean,\n\t\tHolidayUK as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimDate\nStagingDataLake, DimCustomer join(toInteger(cust_id) == customer_Id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCustomer\nJoinDimCustomer, DimProdCat join(toInteger(prod_cat_code) == Product_Cat_Code\n\t&& toInteger(prod_subcat_code) == Product_SubCat_Code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimProdCat\nJoinDimProdCat, DimStore join(StagingDataLake@Store_type == DimStore@Store_Type,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimStore\nJoinDimStore, DimDate join(toDate(tran_date, 'dd-MM-yyyy') == Date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDate\nJoinDimDate derive(quantity_int = toInteger(Qty),\n\t\trate_float = toFloat(Rate),\n\t\ttax_float = toFloat(Tax),\n\t\ttotal_amt_float = toFloat(total_amt)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tFact_Tran_Key as integer,\n\t\tcustomer_key as integer,\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tStore_Key as integer,\n\t\ttran_date as integer,\n\t\tQuantity as integer,\n\t\trate as double,\n\t\ttax as double,\n\t\ttotal_amount as double\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcustomer_key,\n\t\tProd_Cat_SubCat_Key,\n\t\tStore_Key,\n\t\ttran_date = DateKey,\n\t\tQuantity = quantity_int,\n\t\trate = rate_float,\n\t\ttax = tax_float,\n\t\ttotal_amount = total_amt_float\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StoreDatasetFromTransactionFactTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDimStore')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDimDate')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableFact_Transaction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Datalake",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tsourcetable as string,\n\twatermark_field as string\n}\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($sourcetable)]) ~> source1\nsource1 aggregate(max_Created_Modified_Date = iif(toString($sourcetable)=='Customer.csv',\r\nmax(toTimestamp(toString(byName($watermark_field)), 'dd-MM-yyyy HH:mm')),\r\nmax(toTimestamp(byName($watermark_field), 'dd-MM-yyyy HH:mm')))) ~> Aggregate1\nAggregate1 derive(TableName = $sourcetable) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(isNull(max_Created_Modified_Date)==false())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSource as string,\n\t\tSource_Table as string,\n\t\tDest_Table as string,\n\t\tColumns as string,\n\t\tWatermark_Column as string,\n\t\tWatermark_Value as timestamp,\n\t\tEnabled as integer,\n\t\tLoad_Flag as string,\n\t\tStatus as string,\n\t\tComment as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[(Dest_Table)],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDest_Table = TableName,\n\t\tWatermark_Value = max_Created_Modified_Date\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Datalake')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProdCat",
								"type": "DatasetReference"
							},
							"name": "StagingDataLake"
						},
						{
							"dataset": {
								"referenceName": "ProdCatsql",
								"type": "DatasetReference"
							},
							"name": "DimprodCat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tprod_cat_code as string,\n\t\tprod_cat as string,\n\t\tprod_sub_cat_code as string,\n\t\tprod_subcat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingDataLake\nsource(output(\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tProduct_Cat_Code as integer,\n\t\tProduct_Category as string,\n\t\tProduct_SubCat_Code as integer,\n\t\tProduct_SubCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimprodCat\nStagingDataLake, DimprodCat exists(toInteger(prod_cat_code) == Product_Cat_Code\n\t&& toInteger(prod_sub_cat_code) == Product_SubCat_Code,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(prod_cat_code = toInteger(prod_cat_code),\n\t\tprod_sub_cat_code = toInteger(prod_sub_cat_code)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tProduct_Cat_Code as integer,\n\t\tProduct_Category as string,\n\t\tProduct_SubCat_Code as integer,\n\t\tProduct_SubCategory as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProduct_Cat_Code = prod_cat_code,\n\t\tProduct_Category = prod_cat,\n\t\tProduct_SubCat_Code = prod_sub_cat_code,\n\t\tProduct_SubCategory = prod_subcat\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProdCat')]",
				"[concat(variables('factoryId'), '/datasets/ProdCatsql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StoreDatasetFromTransactionFactTable",
								"type": "DatasetReference"
							},
							"name": "StagingDatalake"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDimStore",
								"type": "DatasetReference"
							},
							"name": "DimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableDimStore",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "Exists1"
						}
					],
					"script": "source(output(\n\t\ttransaction_id as string,\n\t\tcust_id as string,\n\t\ttran_date as string,\n\t\tprod_subcat_code as string,\n\t\tprod_cat_code as string,\n\t\tQty as string,\n\t\tRate as string,\n\t\tTax as string,\n\t\ttotal_amt as string,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingDatalake\nsource(output(\n\t\tStore_Key as integer,\n\t\tStore_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimStore\nStagingDatalake aggregate(groupBy(Store_type),\n\tcount = count(transaction_id)) ~> Aggregate1\nAggregate1, DimStore exists(Aggregate1@Store_type == DimStore@Store_Type,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tStore_Key as integer,\n\t\tStore_Type as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tStore_Type = Store_type\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StoreDatasetFromTransactionFactTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDimStore')]"
			]
		}
	]
}