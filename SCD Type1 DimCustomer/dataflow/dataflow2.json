{
    "name": "dataflow2",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "cusomer",
                        "type": "DatasetReference"
                    },
                    "name": "StagingDataLake"
                },
                {
                    "dataset": {
                        "referenceName": "AzureSqlTable2",
                        "type": "DatasetReference"
                    },
                    "name": "DimCustomer"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "AzureSqlTableDim",
                        "type": "DatasetReference"
                    },
                    "name": "sink1"
                },
                {
                    "dataset": {
                        "referenceName": "AzureSqlTableDim",
                        "type": "DatasetReference"
                    },
                    "name": "sink2"
                }
            ],
            "transformations": [
                {
                    "name": "Exists1"
                },
                {
                    "name": "DerivedColumn1"
                },
                {
                    "name": "Exists2"
                },
                {
                    "name": "AlterRow1"
                },
                {
                    "name": "DerivedColumn2"
                }
            ],
            "script": "source(output(\n\t\tcustomer_Id as string,\n\t\tDOB as string,\n\t\tGender as string,\n\t\tcity_code as string,\n\t\tCustomer_Name as string,\n\t\tCreated_Modified_Date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> StagingDataLake\nsource(output(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomer\nStagingDataLake, DimCustomer exists(toInteger(StagingDataLake@customer_Id) == DimCustomer@customer_Id,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(customer_Id = toInteger(customer_Id)) ~> DerivedColumn1\nStagingDataLake, DimCustomer exists(toInteger(StagingDataLake@customer_Id) == DimCustomer@customer_Id,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists2\nDerivedColumn2 alterRow(updateIf(true())) ~> AlterRow1\nExists2 derive(customer_Id = toInteger(customer_Id)) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tgender = Gender,\n\t\tcustomer_name = Customer_Name,\n\t\tDOB,\n\t\tcity_code,\n\t\tcustomer_Id\n\t)) ~> sink1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['customer_Id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcustomer_Id,\n\t\tcustomer_name = Customer_Name,\n\t\tDOB,\n\t\tcity_code,\n\t\tgender = Gender\n\t)) ~> sink2"
        }
    }
}